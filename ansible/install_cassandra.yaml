---
- name: Deploy Cassandra to Lab
  hosts: cassandra
  vars:
    keystore_password: butterball
    truststore_password: butterball
    stores_dir: /etc/cassandra/stores
  
  roles:
    - role: community.cassandra.cassandra_repository
      vars:
        cassandra_version: "41x"
    - role: community.cassandra.cassandra_linux
    - role: community.cassandra.cassandra_install

  tasks:
  
    - name: add host into DNS {{ domain_name }}
      community.digitalocean.digital_ocean_domain_record:
        state: present
        oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
        name: "{{ inventory_hostname }}"
        domain: "{{ domain_name }}"
        data: "{{ ansible_host }}"
        ttl: 300
        type: A
      delegate_to: localhost
      register: dns_result
      ignore_errors: yes


    - name: Debug DNS task
      debug:
        var: dns_result
      when: dns_result is failed


    - name: Fail if DNS task failed
      fail:
        msg: "Failed to add DNS record. Please check if the domain '{{ domain_name }}' exists in your DigitalOcean account and if your API token is correct."
      when: dns_result is failed


    - name: install several packages
      ansible.builtin.package:
        name: "{{item}}"
        state: present
        update_cache: false
      loop:
        - certbot
        - python3-certbot-dns-digitalocean
        - python3-certbot-dns-route53

    - name: write digitalocean creds to file
      ansible.builtin.template:
        src: do_creds.ini.j2
        dest: /root/do_creds.ini
        mode: '0600'

    - name: get certificate
      command: certbot certonly -n --dns-digitalocean --email tom@openmeet.com --dns-digitalocean-credentials /root/do_creds.ini --agree-tos -d "{{ inventory_hostname }}.{{ domain_name }}"

    - name: stop cassandra
      systemd:
        name: cassandra
        state: stopped
        enabled: true

    - name: Copy cassandra.yaml to /etc/cassandra/cassandra.yaml
      copy:
        src: ../database/cassandra.yaml
        dest: /etc/cassandra/cassandra.yaml
        mode: '0644'
        owner: root
        group: cassandra

    - name: Ensure Cassandra directories have correct permissions
      file:
        path: "{{ item }}"
        state: directory
        owner: cassandra
        group: cassandra
        mode: '0755'
      loop:
        - /var/lib/cassandra
        - /var/lib/cassandra/commitlog
        - /var/lib/cassandra/data
        - /var/log/cassandra



    - name: remove old data
      command: rm -rf /var/lib/cassandra/data/*
      when: wipe_data == True

    - name: Create stores directory
      file:
        path: "{{ stores_dir }}"
        state: directory
        mode: '0700'
        owner: cassandra
        group: cassandra

    - name: Convert Let's Encrypt certificates to PKCS12
      community.crypto.openssl_pkcs12:
        action: export
        path: "{{ stores_dir }}/node-keystore.p12"
        friendly_name: "{{ inventory_hostname}}.{{domain_name}}"
        privatekey_path: "/etc/letsencrypt/live/{{ inventory_hostname }}.{{ domain_name }}/privkey.pem"
        certificate_path: "/etc/letsencrypt/live/{{ inventory_hostname }}.{{ domain_name }}/fullchain.pem"
        passphrase: "{{ keystore_password }}"
        state: present
        passphrase: "{{ keystore_password }}"

    - name: Create keystore from PKCS12
      community.general.java_cert:
        pkcs12_path: "{{ stores_dir }}/node-keystore.p12"
        pkcs12_password: "{{ keystore_password }}"
        pkcs12_alias: "{{ inventory_hostname }}.{{ domain_name }}"
        cert_alias: "{{ inventory_hostname }}.{{ domain_name }}"
        keystore_path: "{{ stores_dir }}/node-keystore.jks"
        keystore_pass: "{{ keystore_password }}"
        keystore_create: true
        keystore_type: "JKS"
        state: present

    - name: Create truststore with Let's Encrypt root certificate
      community.general.java_cert:
        cert_path: "/etc/letsencrypt/live/{{ inventory_hostname }}.{{ domain_name }}/chain.pem"
        keystore_path: "{{ stores_dir }}/node-truststore.jks"
        keystore_pass: "{{ truststore_password }}"
        cert_alias: CARoot
        keystore_create: true
        state: present

    - name: Set proper permissions on store files
      file:
        path: "{{ item }}"
        owner: cassandra
        group: cassandra
        mode: '0600'
      loop:
        - "{{ stores_dir }}/node-keystore.p12"
        - "{{ stores_dir }}/node-keystore.jks"
        - "{{ stores_dir }}/node-truststore.jks"
        
    - name: start cassandra
      systemd:
        name: cassandra
        state: started
        enabled: true

    - name: Copy schema.cql to /tmp
      copy:
        src: ../database/schema.cql
        dest: /tmp/schema.cql

    - name: Run cqlsh
      command: cqlsh {{ inventory_hostname }}.{{ domain_name }} -f /tmp/schema.cql
